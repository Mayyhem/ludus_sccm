---
- name: Clear old secondary site logs and status
  ansible.windows.win_shell: |
    Remove-Item "C:\sccm_secondary_install.log" -Force -ErrorAction SilentlyContinue
    Remove-Item "C:\sccm_secondary_install.status" -Force -ErrorAction SilentlyContinue
  failed_when: false
  changed_when: false
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: '{{ ludus_domain_fqdn }}\{{ defaults.ad_domain_admin }}'
    ansible_become_password: '{{ defaults.ad_domain_admin_password }}'
    ansible_become_flags: "logon_type=interactive logon_flags=with_profile"

- name: Create secondary site install script
  ansible.windows.win_copy:
    dest: C:\sccm_install_secondary_site.ps1
    force: yes
    content: |
      param(
          [Parameter(Mandatory = $true)][string]$ParentSiteCode,
          [Parameter(Mandatory = $true)][string]$ServerName,
          [Parameter(Mandatory = $true)][string]$SiteCode
      )

      $log = 'C:\sccm_secondary_install.log'
      $status = 'C:\sccm_secondary_install.status'
      function Write-Log { param([string]$Message); $ts = Get-Date -Format s; try { "$ts $Message" | Out-File -FilePath $log -Append -Encoding utf8 } catch {} }

      try { Remove-Item $log -Force -ErrorAction SilentlyContinue } catch {}
      try { Remove-Item $status -Force -ErrorAction SilentlyContinue } catch {}

      try {
          Write-Log "Starting secondary site install: Parent=[$ParentSiteCode], Secondary=[$SiteCode], Server=[$ServerName]"

          $cmModule = "C:\\Program Files (x86)\\Microsoft Configuration Manager\\AdminConsole\\bin\\ConfigurationManager.psd1"
          if (-not (Test-Path $cmModule)) { throw "ConfigurationManager.psd1 not found at $cmModule" }
          Import-Module $cmModule -ErrorAction Stop

          # Connect to parent site drive
          if ((Get-PSDrive -Name $ParentSiteCode -PSProvider CMSite -ErrorAction SilentlyContinue) -eq $null) {
              $ProviderMachineName = (Get-ItemProperty HKLM:\SOFTWARE\Wow6432Node\Microsoft\ConfigMgr10\AdminUI\Connection -Name Server).Server
              New-PSDrive -Name $ParentSiteCode -PSProvider CMSite -Root $ProviderMachineName | Out-Null
          }
          Set-Location ("{0}:\\" -f $ParentSiteCode)

      # Idempotency: prefer SMS_SiteAndSubsites, fallback to SMS_Site
      $ns = "root\\SMS\\site_$ParentSiteCode"
      $secondaryExists = $false
      $short = ($ServerName -split '\\.')[0]
      try {
        $entries = Get-WmiObject -Namespace $ns -Class SMS_SiteAndSubsites -ErrorAction Stop
      } catch { $entries = $null }

      if ($entries) {
        # Check by SiteCode first
        $byCode = $entries | Where-Object { $_.SiteCode -ieq $SiteCode } | Select-Object -First 1
        if ($byCode) {
          $secondaryExists = $true
        } else {
          # Then check by ServerName; exclude the parent site itself
          $byServer = $entries | Where-Object { ($_.ServerName -ieq $ServerName -or $_.ServerName -ieq $short) -and ($_.SiteCode -ine $ParentSiteCode) } | Select-Object -First 1
          if ($byServer) { $secondaryExists = $true }
        }
      } else {
        # Fallback compatibility path using SMS_Site
        try {
          $secByCode = Get-WmiObject -Namespace $ns -Class SMS_Site -Filter ("SiteCode='{0}'" -f $SiteCode) -ErrorAction Stop
          if ($secByCode) { $secondaryExists = $true }
          if (-not $secondaryExists) {
            $sites = Get-WmiObject -Namespace $ns -Class SMS_Site -ErrorAction Stop
            foreach ($s in ($sites | Where-Object { $_ })) {
              if (($s.ServerName -ieq $ServerName) -or ($s.ServerName -ieq $short)) {
                if ($s.Type -eq 2) { $secondaryExists = $true; break }
              }
            }
          }
        } catch { }
      }
          if ($secondaryExists) {
              Write-Log "Secondary site already exists for SiteCode=[$SiteCode] or Server=[$ServerName]; skipping create"
              "SUCCESS" | Out-File -FilePath $status -Force -Encoding utf8
              exit 0
          }

          $certExpiry = [DateTime]::UtcNow.AddYears(2)
          $SQLServerSettings = New-CMSqlServerSetting -CopySqlServerExpressOnSecondarySite
          $InstallFiles = New-CMInstallationSourceFile -CopyFromParentSiteServer

          try {
              New-CMSecondarySite -CertificateExpirationTimeUtc $certExpiry -CreateSelfSignedCertificate -Http -InstallationSourceFile $InstallFiles -InstallInternetServer $True -PrimarySiteCode $ParentSiteCode -ServerName $ServerName -SecondarySiteCode $SiteCode -SiteName "Secondary Site" -SqlServerSetting $SQLServerSettings
          } catch {
              $em = $_.Exception.Message
              if ($em -match '(?i)already.*(exists|installed)') {
                  Write-Log "Secondary site appears to already exist; treating as success"
                  "SUCCESS" | Out-File -FilePath $status -Force -Encoding utf8
                  exit 0
              }
              throw
          }

          Write-Log "Secondary site creation initiated"
          "SUCCESS" | Out-File -FilePath $status -Force -Encoding utf8
          exit 0
      } catch {
          $msg = "ERROR: $($_.Exception.Message)"
          Write-Log $msg
          try { $msg | Out-File -FilePath $status -Force -Encoding utf8 } catch {}
          exit 1
      }
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: '{{ ludus_domain_fqdn }}\{{ defaults.ad_domain_admin }}'
    ansible_become_password: '{{ defaults.ad_domain_admin_password }}'
    ansible_become_flags: "logon_type=interactive logon_flags=with_profile"

- name: Ensure scheduled task exists for Secondary Site install
  ansible.windows.win_shell: |
    schtasks.exe /Create /TN 'SCCM-Secondary-Install' /TR 'powershell.exe -NoProfile -ExecutionPolicy Bypass -File C:\sccm_install_secondary_site.ps1 -ParentSiteCode "{{ ludus_sccm_sitecode }}" -ServerName "{{ ludus_sccm_secondary_siteserver_fqdn }}" -SiteCode "{{ ludus_sccm_secondary_sitecode }}"' /SC ONCE /ST 00:00 /RL HIGHEST /RU '{{ ludus_domain_fqdn }}\{{ defaults.ad_domain_admin }}' /RP '{{ defaults.ad_domain_admin_password }}' /F
  changed_when: true

- name: Start Secondary Site install scheduled task
  ansible.windows.win_shell: |
    schtasks /Run /TN "SCCM-Secondary-Install"
  register: secondary_setup_job_start
  changed_when: true
  failed_when: false

- name: Wait for Secondary Site install log to appear
  ansible.windows.win_wait_for:
    path: C:\sccm_secondary_install.log
    state: present
    timeout: 120
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: '{{ ludus_domain_fqdn }}\{{ defaults.ad_domain_admin }}'
    ansible_become_password: '{{ defaults.ad_domain_admin_password }}'
    ansible_become_flags: "logon_type=interactive logon_flags=with_profile"

- name: Monitor Secondary Site install
  ansible.windows.win_shell: |
    $p = 'C:\sccm_secondary_install.status'
    if (Test-Path $p) {
      try { $s = Get-Content $p -Raw -ErrorAction Stop } catch { $s = '' }
      if ($s -match '^SUCCESS') { exit 0 }
      if ($s -match '^ERROR') {
        Write-Output "\n=== Last 100 lines of sccm_secondary_install.log ==="
        try { Get-Content 'C:\sccm_secondary_install.log' -Tail 100 -ErrorAction Stop | ForEach-Object { Write-Output $_ } } catch {}
        exit 1
      }
    }
    exit 2
  register: secondary_monitor_result
  until: secondary_monitor_result.rc == 0 or secondary_monitor_result.rc == 1
  retries: 120  # up to 2 hours
  delay: 60     # check every minute
  failed_when: secondary_monitor_result.rc == 1
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: '{{ ludus_domain_fqdn }}\{{ defaults.ad_domain_admin }}'
    ansible_become_password: '{{ defaults.ad_domain_admin_password }}'
    ansible_become_flags: "logon_type=interactive logon_flags=with_profile"